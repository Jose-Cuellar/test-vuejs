{"ast":null,"code":"import axios from \"axios\";\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert2';\nexport default {\n  name: 'pruebaAxios',\n\n  data() {\n    return {\n      datos: [],\n      paginate: ['datos'],\n      dataToExport: []\n    };\n  },\n\n  methods: {\n    get_data() {\n      var app = this;\n      axios.get(\"https://jsonplaceholder.typicode.com/todos/\").then(res => {\n        app.datos = res.data; // console.log('app.datos: ', app.datos);\n      });\n    },\n\n    downloadExcel() {\n      swal.fire({\n        icon: \"question\",\n        title: \"Descargar reporte\",\n        text: \"¿Deseas descargar el reporte?\",\n        confirmButtonText: \"Sí, Descargar\",\n        confirmButtonColor: \"green\",\n        showCancelButton: true,\n        cancelButtonText: \"No, Cancelar\",\n        cancelButtonColor: \"#d33\",\n        showClass: {\n          popup: 'animate__animated animate__fadeInDown'\n        }\n      }).then(result => {\n        if (result.isConfirmed) {\n          this.datos.forEach(dato => {\n            this.dataToExport.push({\n              Id_Usuario: dato.userId,\n              Id: dato.id,\n              Titulo: dato.title,\n              Completado: dato.completed\n            });\n          });\n          let data = XLSX.utils.json_to_sheet(this.dataToExport);\n          const workbook = XLSX.utils.book_new();\n          const filename = 'axios_get';\n          XLSX.utils.book_append_sheet(workbook, data, filename);\n          XLSX.writeFile(workbook, `${filename}.xlsx`);\n        }\n      });\n    }\n\n  },\n\n  mounted() {\n    this.get_data();\n  },\n\n  created() {}\n\n};","map":{"version":3,"mappings":"AAgCA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,eAAe;EACbC,IAAI,EAAE,aADO;;EAEbC,IAAI,GAAE;IACF,OAAM;MACFC,KAAK,EAAE,EADL;MAEFC,QAAQ,EAAE,CAAC,OAAD,CAFR;MAGFC,YAAY,EAAE;IAHZ,CAAN;EAKH,CARY;;EASbC,OAAO,EAAC;IACJC,QAAQ,GAAE;MACN,IAAIC,GAAE,GAAI,IAAV;MACAV,KAAK,CAACW,GAAN,CAAU,6CAAV,EAAyDC,IAAzD,CAA+DC,GAAD,IAAS;QACnEH,GAAG,CAACL,KAAJ,GAAYQ,GAAG,CAACT,IAAhB,CADmE,CAEnE;MACH,CAHD;IAIH,CAPG;;IAQJU,aAAa,GAAG;MACdZ,IAAI,CAACa,IAAL,CAAU;QACVC,IAAI,EAAE,UADI;QAEVC,KAAK,EAAE,mBAFG;QAGVC,IAAI,EAAE,+BAHI;QAIVC,iBAAiB,EAAE,eAJT;QAKVC,kBAAkB,EAAE,OALV;QAMVC,gBAAgB,EAAE,IANR;QAOVC,gBAAgB,EAAE,cAPR;QAQVC,iBAAiB,EAAE,MART;QASVC,SAAS,EAAE;UACTC,KAAK,EAAE;QADE;MATD,CAAV,EAYGb,IAZH,CAYUc,MAAD,IAAY;QACnB,IAAGA,MAAM,CAACC,WAAV,EAAsB;UACpB,KAAKtB,KAAL,CAAWuB,OAAX,CAAoBC,IAAD,IAAU;YACzB,KAAKtB,YAAL,CAAkBuB,IAAlB,CAAuB;cACnBC,UAAU,EAACF,IAAI,CAACG,MADG;cAEnBC,EAAE,EAACJ,IAAI,CAACK,EAFW;cAGnBC,MAAM,EAACN,IAAI,CAACZ,KAHO;cAInBmB,UAAU,EAACP,IAAI,CAACQ;YAJG,CAAvB;UAMH,CAPD;UAQA,IAAIjC,IAAG,GAAIH,IAAI,CAACqC,KAAL,CAAWC,aAAX,CAAyB,KAAKhC,YAA9B,CAAX;UACA,MAAMiC,QAAO,GAAIvC,IAAI,CAACqC,KAAL,CAAWG,QAAX,EAAjB;UACA,MAAMC,QAAO,GAAI,WAAjB;UACAzC,IAAI,CAACqC,KAAL,CAAWK,iBAAX,CAA6BH,QAA7B,EAAuCpC,IAAvC,EAA6CsC,QAA7C;UACAzC,IAAI,CAAC2C,SAAL,CAAeJ,QAAf,EAA0B,GAAEE,QAAS,OAArC;QACF;MACD,CA5BD;IA6BF;;EAtCI,CATK;;EAiDbG,OAAO,GAAE;IACL,KAAKpC,QAAL;EACH,CAnDY;;EAoDbqC,OAAO,GAAG,CAEV;;AAtDa,CAAf","names":["axios","XLSX","swal","name","data","datos","paginate","dataToExport","methods","get_data","app","get","then","res","downloadExcel","fire","icon","title","text","confirmButtonText","confirmButtonColor","showCancelButton","cancelButtonText","cancelButtonColor","showClass","popup","result","isConfirmed","forEach","dato","push","Id_Usuario","userId","Id","id","Titulo","Completado","completed","utils","json_to_sheet","workbook","book_new","filename","book_append_sheet","writeFile","mounted","created"],"sourceRoot":"","sources":["/home/tars/Documentos/proyectos/test_vue/src/components/pruebaAxios.vue"],"sourcesContent":["<template>\n    <div class=\"content\">\n        <hr>\n        <h1 id=\"title\">Datos consumidos por axios</h1>\n        <!-- <paginate ref=\"paginator\" name=\"datos\" :list=\"datos\" :per=\"10\"> -->\n          <table class=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>ID USER</th>\n                    <th>ID</th>\n                    <th>TITLE</th>\n                    <th>COMPLETED</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for=\"dato in datos\" v-bind:key=\"dato.id\">\n                    <td>{{ dato.userId }}</td>\n                    <td>{{ dato.id }}</td>\n                    <td>{{ dato.title }}</td>\n                    <td>{{ dato.completed }}</td>\n                </tr>\n            </tbody>\n          </table>\n        <!-- </paginate> -->\n        <button class=\"btn_excel\" @click=\"downloadExcel()\">\n            Descargar excel\n        </button>\n        <hr>\n    </div>\n</template>\n  \n<script>\nimport axios from \"axios\";\nimport * as XLSX from 'xlsx';\nimport swal from 'sweetalert2';\n\nexport default {\n  name: 'pruebaAxios',\n  data(){\n      return{\n          datos: [],\n          paginate: ['datos'],\n          dataToExport: [],\n      }\n  },\n  methods:{\n      get_data(){\n          var app = this;\n          axios.get(\"https://jsonplaceholder.typicode.com/todos/\").then((res) => {\n              app.datos = res.data;\n              // console.log('app.datos: ', app.datos);\n          });\n      },\n      downloadExcel() {\n        swal.fire({\n        icon: \"question\",\n        title: \"Descargar reporte\",\n        text: \"¿Deseas descargar el reporte?\",\n        confirmButtonText: \"Sí, Descargar\",\n        confirmButtonColor: \"green\",\n        showCancelButton: true,\n        cancelButtonText: \"No, Cancelar\",\n        cancelButtonColor: \"#d33\",\n        showClass: {\n          popup: 'animate__animated animate__fadeInDown'\n        },\n        }).then( (result) => {\n          if(result.isConfirmed){\n            this.datos.forEach((dato) => {\n                this.dataToExport.push({\n                    Id_Usuario:dato.userId,\n                    Id:dato.id,\n                    Titulo:dato.title,\n                    Completado:dato.completed\n                });\n            });\n            let data = XLSX.utils.json_to_sheet(this.dataToExport);\n            const workbook = XLSX.utils.book_new();\n            const filename = 'axios_get';\n            XLSX.utils.book_append_sheet(workbook, data, filename);\n            XLSX.writeFile(workbook, `${filename}.xlsx`);\n          }\n        });\n      }\n  },\n  mounted(){\n      this.get_data();\n  },\n  created() {\n      \n  }\n};\n</script>\n  \n<style scoped>\n  .content{\n    max-width: 80%;\n    padding: 20px 10px 50px 10px;\n    margin: auto;\n  }\n  /* th{\n    border: 2px solid #008CBA !important;\n  }\n  th, td{\n    text-align:left;\n    border: 1px solid gray;\n    padding: 10px 10px 10px 10px;\n    margin: auto;\n  } */\n  #title{\n    font-size:30px;\n    color:darkblue;\n  }\n  .btn_excel{\n    padding: 10px 15px 10px 15px;\n    border: 2px solid;\n    cursor: pointer;\n    background-color: white;\n    color: #008CBA;\n    border-radius: 30px;\n    font-weight: bold;\n    margin-top: 20px;\n  }\n  .btn_excel:hover{\n    color: green;\n  }\n</style>"]},"metadata":{},"sourceType":"module"}